#include <iostream> 
#include <GL/glut.h>

using namespace std;

// 递归函数，用于生成Koch曲线
void koch(int depth, float x1, float y1, float x2, float y2) {
    if (depth == 0) { // 边界条件，深度为0时退出递归
        glVertex2f(x1, y1);
        glVertex2f(x2, y2);
    }
    else {
        float x3 = x1 + (x2 - x1) / 3;
        float y3 = y1 + (y2 - y1) / 3;
        float x4 = x2 - (x2 - x1) / 3;
        float y4 = y2 - (y2 - y1) / 3;
        float x5 = x3 + (x4 - x3) * 0.5 - (y4 - y3) * sqrt(3.0) * 0.5;
        float y5 = y3 + (y4 - y3) * 0.5 + (x4 - x3) * sqrt(3.0) * 0.5;
        // 递归生成新的线段，深度减1
        koch(depth - 1, x1, y1, x3, y3);
        koch(depth - 1, x3, y3, x5, y5);
        koch(depth - 1, x5, y5, x4, y4);
        koch(depth - 1, x4, y4, x2, y2);
    }
}

void display() {
    // 设置清屏色为黑色
    glClearColor(0, 0, 0, 0);
    glClear(GL_COLOR_BUFFER_BIT);
    // 设置画笔颜色和粗细
    glColor3f(1, 1, 1);
    glLineWidth(1.0f);
    // 开始绘制Koch曲线
    glBegin(GL_LINES);
    koch(4, -0.8, -0.4, 0.8, -0.4);
    glEnd();
    // 刷新缓冲区，显示绘制结果
    glFlush();
}

int main(int argc, char** argv) {
    // 初始化OpenGL环境
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Koch Curve");
    // 设置绘制函数和显示窗口
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}